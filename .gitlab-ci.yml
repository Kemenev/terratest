stages:
  - validate
  - plan
  - apply
  
validate:
  stage: validate
  image: alpine/terragrunt:1.12.2  
  before_script:
    - unzip -o terraform-plugins.zip
    - export TF_VAR_vsphere_password=$(echo "$TF_VAR_vsphere_password" | base64 -d)
    - mkdir -p ~/.terraform.d/plugins/registry.terraform.io/hashicorp/vsphere/2.15.0/linux_amd64
    - mkdir -p ~/.terraform.d/plugins/registry.terraform.io/e-breuninger/netbox/5.0.0/linux_amd64
    - cp terraform-plugins/registry.terraform.io/hashicorp/vsphere/2.15.0/terraform-provider-vsphere_v2.15.0 ~/.terraform.d/plugins/registry.terraform.io/hashicorp/vsphere/2.15.0/linux_amd64
    - cp terraform-plugins/registry.terraform.io/e-breuninger/netbox/5.0.0/linux_amd64/terraform-provider-netbox_v5.0.0 ~/.terraform.d/plugins/registry.terraform.io/e-breuninger/netbox/5.0.0/linux_amd64
    - chmod +x ~/.terraform.d/plugins/registry.terraform.io/hashicorp/vsphere/2.15.0/linux_amd64/terraform-provider-vsphere_v2.15.0
    - chmod +x ~/.terraform.d/plugins/registry.terraform.io/e-breuninger/netbox/5.0.0/linux_amd64/terraform-provider-netbox_v5.0.0
    - echo "$NETBOX_CERT" > /usr/local/share/ca-certificates/netbox.crt
    - update-ca-certificates
  tags:
    - docker
  script:
    - terraform init -backend-config="password=$CI_JOB_TOKEN"
    - terraform validate

plan:
  stage: plan
  image: alpine/terragrunt:1.12.2  
  before_script:
    - unzip -o terraform-plugins.zip
    - export TF_VAR_vsphere_password=$(echo "$TF_VAR_vsphere_password" | base64 -d)
    - mkdir -p ~/.terraform.d/plugins/registry.terraform.io/hashicorp/vsphere/2.15.0/linux_amd64
    - mkdir -p ~/.terraform.d/plugins/registry.terraform.io/e-breuninger/netbox/5.0.0/linux_amd64
    - cp terraform-plugins/registry.terraform.io/hashicorp/vsphere/2.15.0/terraform-provider-vsphere_v2.15.0 ~/.terraform.d/plugins/registry.terraform.io/hashicorp/vsphere/2.15.0/linux_amd64
    - cp terraform-plugins/registry.terraform.io/e-breuninger/netbox/5.0.0/linux_amd64/terraform-provider-netbox_v5.0.0 ~/.terraform.d/plugins/registry.terraform.io/e-breuninger/netbox/5.0.0/linux_amd64
    - chmod +x ~/.terraform.d/plugins/registry.terraform.io/hashicorp/vsphere/2.15.0/linux_amd64/terraform-provider-vsphere_v2.15.0
    - chmod +x ~/.terraform.d/plugins/registry.terraform.io/e-breuninger/netbox/5.0.0/linux_amd64/terraform-provider-netbox_v5.0.0
    - echo "$NETBOX_CERT" > /usr/local/share/ca-certificates/netbox.crt
    - update-ca-certificates
  tags:
    - docker
  script:
    - export TF_LOG=DEBUG
    - export TF_LOG_PATH=tf-debug.log
    - terraform init -backend-config="password=$CI_JOB_TOKEN"
    - terraform plan -var-file=terraform.tfvars -out=tfplan
    - terraform show -no-color tfplan > tfplan.txt

  artifacts:
    when: always
    paths:
      - tfplan.txt
      - tfplan
#      - .terraform.lock.hcl
#      - .terraform
#      - tf-debug.log
apply:
  stage: apply
  image: alpine/terragrunt:1.12.2
  before_script:
   - unzip -o terraform-plugins.zip
   - export TF_VAR_vsphere_password=$(echo "$TF_VAR_vsphere_password" | base64 -d)
   - mkdir -p ~/.terraform.d/plugins/registry.terraform.io/hashicorp/vsphere/2.15.0/linux_amd64
   - mkdir -p ~/.terraform.d/plugins/registry.terraform.io/e-breuninger/netbox/5.0.0/linux_amd64
   - cp terraform-plugins/registry.terraform.io/hashicorp/vsphere/2.15.0/terraform-provider-vsphere_v2.15.0 ~/.terraform.d/plugins/registry.terraform.io/hashicorp/vsphere/2.15.0/linux_amd64
   - cp terraform-plugins/registry.terraform.io/e-breuninger/netbox/5.0.0/linux_amd64/terraform-provider-netbox_v5.0.0 ~/.terraform.d/plugins/registry.terraform.io/e-breuninger/netbox/5.0.0/linux_amd64
   - chmod +x ~/.terraform.d/plugins/registry.terraform.io/hashicorp/vsphere/2.15.0/linux_amd64/terraform-provider-vsphere_v2.15.0
   - chmod +x ~/.terraform.d/plugins/registry.terraform.io/e-breuninger/netbox/5.0.0/linux_amd64/terraform-provider-netbox_v5.0.0
   - echo "$NETBOX_CERT" > /usr/local/share/ca-certificates/netbox.crt
   - update-ca-certificates
  tags:
    - docker
  script:
    - terraform init -backend-config="password=$CI_JOB_TOKEN"
    - terraform apply -auto-approve tfplan
  when: manual
  dependencies:
    - plan
  allow_failure: false
